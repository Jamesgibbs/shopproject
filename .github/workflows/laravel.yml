
name: Laravel CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: laravel_test
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug

      - name: Copy .env.example
        run: cp .env.example .env

      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install NPM Dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel_test
          DB_USERNAME: root
          DB_PASSWORD: password
        run: php artisan test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Install latest Docker Compose V2
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Configure directory
          git config --global --add safe.directory /var/www/laravel-app
          mkdir -p /var/www/laravel-app
          cd /var/www/laravel-app

          # Pull latest code
          git pull origin main

          # Ensure environment variables are set with default values if not provided
          if [ -z "${DB_USERNAME}" ]; then
            echo "Warning: DB_USERNAME not set. Please set this in your deployment environment"
            exit 1
          fi

          if [ -z "${DB_PASSWORD}" ]; then
            echo "Warning: DB_PASSWORD not set. Please set this in your deployment environment"
            exit 1
          fi

          # Copy environment file if not exists
          if [ ! -f .env ]; then
            cp .env.example .env
            # Update .env with deployment environment variables
            sed -i "s/DB_CONNECTION=.*/DB_CONNECTION=mysql/" .env
            sed -i "s/DB_HOST=.*/DB_HOST=laravel-db/" .env
            sed -i "s/DB_PORT=.*/DB_PORT=3306/" .env
            sed -i "s/DB_DATABASE=.*/DB_DATABASE=${DB_DATABASE}/" .env
            sed -i "s/DB_USERNAME=.*/DB_USERNAME=${DB_USERNAME}/" .env
            sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${DB_PASSWORD}/" .env

            # Set production environment
            sed -i "s/APP_ENV=.*/APP_ENV=production/" .env
            sed -i "s/APP_DEBUG=.*/APP_DEBUG=false/" .env
          fi


  # Force remove any existing containers (including those that might be stuck)
          docker-compose down --remove-orphans
          docker rm -f laravel-app laravel-nginx laravel-db laravel-redis laravel-node 2>/dev/null || true

          # Build and start Docker containers
          docker-compose build --no-cache
          docker-compose up -d

          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          sleep 30

          # Run Laravel commands inside the app container
          docker-compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader
          docker-compose exec -T app php artisan migrate --force
          docker-compose exec -T app php artisan optimize
