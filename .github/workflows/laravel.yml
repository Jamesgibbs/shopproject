name: Laravel CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: laravel_test
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, fileinfo, mysql, redis
          coverage: xdebug
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Copy .env.ci
        run: cp .env.ci .env

      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build assets
        env:
          VITE_DEV_SERVER_URL: ""
          NODE_ENV: production
        run: |
          npm run build
          echo "Listing build contents:"
          ls -la public/build

      - name: Check if public/build exists
        run: ls -la public/build

      - name: Check manifest presence
        run: ls -la public/build/manifest.json

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel_test
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
        run: php artisan test

      - name: Archive built assets
        run: zip -r build.zip public/build

      - name: List contents of build.zip before upload
        run: unzip -l build.zip

      - name: Upload build.zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vite-assets
          path: build.zip

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # 1. Bring in your repo (so scripts/deploy.sh is present)
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Download the build.zip artifact into the workspace root
      - name: Download frontend assets
        uses: actions/download-artifact@v4
        with:
          name: vite-assets      # must match your 'upload-artifact' name
          path: .                # drops build.zip in the root

      # 3. Sanity-check that both files exist
      - name: List workspace files
        run: |
          echo "üóÇÔ∏è  Files in workspace:"
          ls -al .

      - name: Ensure deploy.sh is executable
        run: chmod 755 scripts/deploy.sh

      - name: Confirm deploy script exists
        run: |
          ls -al scripts/deploy.sh
          file scripts/deploy.sh

    # 4. Upload via SCP (now non-empty!)
      - name: Upload build.zip & deploy.sh
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            build.zip
            scripts/deploy.sh
          target: /tmp

      # 5. SSH in and kick off your deploy.sh
      - name: Execute remote deploy script
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          script: |
            chmod +x /tmp/deploy.sh
            bash /tmp/deploy.sh /tmp/build.zip

