name: Laravel CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: laravel_test
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, fileinfo, mysql, redis
          coverage: xdebug
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Copy .env.ci
        run: cp .env.ci .env

      - name: Trust /var/www for Git
        run: git config --global --add safe.directory /var/www

      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build assets
        env:
          VITE_DEV_SERVER_URL: ""
          NODE_ENV: production
        run: |
          npm run build
          echo "Listing build contents:"
          ls -la public/build

      - name: Check if public/build exists
        run: ls -la public/build

      - name: Check manifest presence
        run: ls -la public/build/manifest.json

      - name: Fail if build directory is empty
        run: |
          if [ ! -s public/build/manifest.json ]; then
            echo "Build failed: manifest.json missing or empty"
            exit 1
          fi

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel_test
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
        run: php artisan test

      - name: Archive built assets
        run: zip -r build.zip public/build

      - name: List contents of build.zip before upload
        run: unzip -l build.zip

      - name: Upload build.zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vite-assets
          path: build.zip

  build_and_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/laravel-app:latest
            ghcr.io/${{ github.repository_owner }}/laravel-app:${{ github.sha }}
          build-args: |
            PUID=1000
            PGID=1000

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch, optional)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io           # or docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v4
        env:
          REPO_OWNER: ${{ github.repository_owner }}
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ toLower(github.repository_owner) }}/laravel-app:latest
            ghcr.io/${{ toLower(github.repository_owner) }}/laravel-app:${{ github.sha }}
          build-args: |
            PUID=1000
            PGID=1000

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: |
            APP_URL=${{ secrets.APP_URL }}
            DB_HOST=${{ secrets.DB_CONTAINER }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          script: |
            cd /var/www/laravel-app
            docker-compose pull app
            docker-compose up -d app nginx
            docker-compose exec -T app php artisan migrate --force
            docker-compose exec -T app php artisan cache:clear

