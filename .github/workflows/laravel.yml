name: Laravel CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: laravel_test
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, fileinfo, mysql, redis
          coverage: xdebug
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Copy .env.ci
        run: cp .env.ci .env

      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel_test
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
        run: php artisan test --parallel

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        env:
          DEPLOY_PATH: /var/www/laravel-app
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DEPLOY_PATH,DB_USERNAME,DB_PASSWORD,DB_DATABASE
          script: |
            # Install latest Docker Compose V2
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Configure directory
            mkdir -p ${DEPLOY_PATH}
            cd ${DEPLOY_PATH}

            # Fix permissions
            sudo chown -R $USER:$USER .
            git config --global --add safe.directory ${DEPLOY_PATH}

            # Pull latest code
            if [ -d .git ]; then
              git fetch --all
              git reset --hard origin/main
            else
              git clone  . https://github.com/Jamesgibbs/shopproject.git .
            fi

            # Setup storage directories
            sudo mkdir -p storage/logs storage/framework/{sessions,views,cache}
            sudo chmod -R 775 storage bootstrap/cache
            sudo chown -R www-data:www-data storage bootstrap/cache

            # Environment setup
            if [ ! -f .env ]; then
              cp .env.example .env
              sed -i "s|DB_CONNECTION=.*|DB_CONNECTION=mysql|g" .env
              sed -i "s|DB_HOST=.*|DB_HOST=laravel-db|g" .env
              sed -i "s|DB_PORT=.*|DB_PORT=3306|g" .env
              sed -i "s|DB_DATABASE=.*|DB_DATABASE=${DB_DATABASE}|g" .env
              sed -i "s|DB_USERNAME=.*|DB_USERNAME=${DB_USERNAME}|g" .env
              sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${DB_PASSWORD}|g" .env
              sed -i "s|APP_ENV=.*|APP_ENV=production|g" .env
              sed -i "s|APP_DEBUG=.*|APP_DEBUG=false|g" .env
            fi

            # Docker cleanup and restart
            docker-compose down --remove-orphans
            docker-compose pull
            docker-compose build --no-cache
            docker-compose up -d

            # Wait for services
            echo "Waiting for services to be ready..."
            sleep 15

            # Application setup
            docker-compose exec -T app composer install --no-dev --optimize-autoloader
            docker-compose exec -T app php artisan migrate --force
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache

            echo "Deployment completed successfully"
